## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  Development tools for Clambake multi-agent orchestration
## -------------------------------------------------------------------
[install]
# Core Rust development tools
rustc.pkg-path = "rustc"
cargo.pkg-path = "cargo"
rustfmt.pkg-path = "rustfmt" 
clippy.pkg-path = "clippy"

# Git and GitHub CLI
git.pkg-path = "git"
gh.pkg-path = "gh"

# Docker for Phoenix observability stack
docker.pkg-path = "docker"
docker-compose.pkg-path = "docker-compose"

# Development utilities
jq.pkg-path = "jq"
curl.pkg-path = "curl"
ripgrep.pkg-path = "ripgrep"

# Optional: GUI tools for development
gum.pkg-path = "gum"
openssl_3_0.pkg-path = "openssl_3_0"
pkg-config.pkg-path = "pkg-config"
gcc.pkg-path = "gcc"


## Environment Variables ---------------------------------------------
##  Clambake development environment configuration
## -------------------------------------------------------------------
[vars]
CLAMBAKE_ENV = "development"
CLAMBAKE_CONFIG_DIR = "$FLOX_ENV_PROJECT/.clambake"
RUST_LOG = "debug"
RUST_BACKTRACE = "1"

# Phoenix Observability Configuration
PHOENIX_PORT = "6006"
OTEL_EXPORTER_OTLP_ENDPOINT = "http://localhost:4317"

# GitHub Integration (will be set from credential files)
GITHUB_TOKEN_FILE = "$FLOX_ENV_PROJECT/.clambake/credentials/github_token"
GITHUB_OWNER_FILE = "$FLOX_ENV_PROJECT/.clambake/credentials/github_owner"
GITHUB_REPO_FILE = "$FLOX_ENV_PROJECT/.clambake/credentials/github_repo"


## Activation Hook ---------------------------------------------------
##  Initialize Clambake development environment
## -------------------------------------------------------------------
[hook]
on-activate = '''
  echo "üöÄ Activating Clambake Development Environment"
  
  # Create credential directories if they don't exist
  mkdir -p "$FLOX_ENV_PROJECT/.clambake/credentials"
  mkdir -p "$FLOX_ENV_PROJECT/.clambake/config"
  mkdir -p "$FLOX_ENV_PROJECT/.clambake/cache"
  
  # Set up credential files with placeholders if they don't exist
  if [ ! -f "$GITHUB_TOKEN_FILE" ]; then
    echo "YOUR_GITHUB_TOKEN_HERE" > "$GITHUB_TOKEN_FILE"
    echo "üìù Created GitHub token placeholder at: $GITHUB_TOKEN_FILE"
  fi
  
  if [ ! -f "$GITHUB_OWNER_FILE" ]; then
    echo "your-github-username" > "$GITHUB_OWNER_FILE" 
    echo "üìù Created GitHub owner placeholder at: $GITHUB_OWNER_FILE"
  fi
  
  if [ ! -f "$GITHUB_REPO_FILE" ]; then
    echo "your-repo-name" > "$GITHUB_REPO_FILE"
    echo "üìù Created GitHub repo placeholder at: $GITHUB_REPO_FILE"
  fi
  
  # Important: Unset conflicting GITHUB_TOKEN that interferes with gh CLI
  unset GITHUB_TOKEN
  
  # Create symlink to debug build for development
  if [ -f "$FLOX_ENV_PROJECT/target/debug/clambake" ]; then
    mkdir -p "$FLOX_ENV_PROJECT/.clambake/bin"
    ln -sf "$FLOX_ENV_PROJECT/target/debug/clambake" "$FLOX_ENV_PROJECT/.clambake/bin/clambake"
    echo "üîó Created symlink: clambake -> target/debug/clambake"
  fi
  
  # Warn about credential setup
  if [ -f "$GITHUB_TOKEN_FILE" ] && [ "$(cat "$GITHUB_TOKEN_FILE" | tr -d '\n')" = "YOUR_GITHUB_TOKEN_HERE" ]; then
    echo "‚ö†Ô∏è  GitHub token is still a placeholder - run 'cargo run' for setup instructions"
  fi
  
  echo "‚úÖ Clambake environment ready! Run 'cargo run' to see onboarding instructions."
  echo "üí° Use 'gh auth status' to check GitHub CLI authentication"
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
common = '''
  # Set Clambake-specific GitHub token from file (if exists and valid)
  if [ -f "$FLOX_ENV_PROJECT/.clambake/credentials/github_token" ]; then
    token_content="$(cat "$FLOX_ENV_PROJECT/.clambake/credentials/github_token" | tr -d '\n')"
    if [ "$token_content" != "YOUR_GITHUB_TOKEN_HERE" ] && [ -n "$token_content" ]; then
      export CLAMBAKE_GITHUB_TOKEN="$token_content"
    fi
  fi
  
  # Set GitHub owner and repo from files (if exists and valid)
  if [ -f "$FLOX_ENV_PROJECT/.clambake/credentials/github_owner" ]; then
    owner_content="$(cat "$FLOX_ENV_PROJECT/.clambake/credentials/github_owner" | tr -d '\n')"
    if [ "$owner_content" != "your-github-username" ] && [ -n "$owner_content" ]; then
      export GITHUB_OWNER="$owner_content"
    fi
  fi
  
  if [ -f "$FLOX_ENV_PROJECT/.clambake/credentials/github_repo" ]; then
    repo_content="$(cat "$FLOX_ENV_PROJECT/.clambake/credentials/github_repo" | tr -d '\n')"
    if [ "$repo_content" != "your-repo-name" ] && [ -n "$repo_content" ]; then
      export GITHUB_REPO="$repo_content"
    fi
  fi
  
  # Ensure GITHUB_TOKEN doesn't interfere with gh CLI
  unset GITHUB_TOKEN
  
  # Add clambake debug build to PATH if symlink exists
  if [ -f "$FLOX_ENV_PROJECT/.clambake/bin/clambake" ]; then
    export PATH="$FLOX_ENV_PROJECT/.clambake/bin:$PATH"
  fi
'''
## Shell-specific customizations such as setting aliases go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false
