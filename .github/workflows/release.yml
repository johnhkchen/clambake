name: Release Binary Assets

# This workflow handles automated binary releases for the my-little-soda project
# It builds cross-platform binaries and creates GitHub releases
#
# TRIGGER CONDITIONS:
# - Version tags: v1.0.0, v2.1.3, v0.1.0-beta.1 (semantic versioning with 'v' prefix)
# - Manual dispatch: For testing and manual releases
#
# TAG PATTERN MATCHING:
# - Matches: v[0-9]+.[0-9]+.[0-9]+           (e.g., v1.0.0, v2.1.3)
# - Matches: v[0-9]+.[0-9]+.[0-9]+-*         (e.g., v1.0.0-beta.1, v2.0.0-rc.1)
# - Ignores: Non-version tags, tags without 'v' prefix, malformed versions
#
# VERSION EXTRACTION:
# - From tags: Strips 'v' prefix (v1.2.3 â†’ 1.2.3)
# - From Cargo.toml: Fallback for manual dispatch
# - Available as: ${{ needs.prepare-release.outputs.version }}

on:
  # Trigger on version tags (v*.*.* pattern)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'  # Pre-release tags like v1.0.0-beta.1
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run without creating actual release'
        required: false
        default: 'false'
        type: boolean

# Permissions required for creating releases and uploading assets
permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  # Binary name from Cargo.toml
  BINARY_NAME: my-little-soda
  # Version information available from Git tag
  # Will be set in prepare-release job

jobs:
  # Placeholder job structure - will be expanded in subsequent tasks
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      release-name: ${{ steps.extract-version.outputs.release-name }}
      tag-name: ${{ steps.extract-version.outputs.tag-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: extract-version
        run: |
          # Extract version from Git tag or Cargo.toml
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Extract from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Version extracted from tag: ${VERSION}"
          else
            # Fallback to Cargo.toml for workflow_dispatch
            VERSION=$(grep '^version = ' Cargo.toml | head -n1 | cut -d'"' -f2)
            echo "Version extracted from Cargo.toml: ${VERSION}"
          fi
          
          # Set outputs
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release-name=my-little-soda-v${VERSION}" >> $GITHUB_OUTPUT
          echo "tag-name=v${VERSION}" >> $GITHUB_OUTPUT
          
          # Make version available as environment variable for other jobs
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV

  # Placeholder for build jobs - will be implemented in A2x tasks
  build-linux:
    name: Build Linux x86_64
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Placeholder for Linux build
        run: echo "Linux x86_64 build will be implemented in A2a"

  build-macos:
    name: Build macOS (Intel and ARM)
    runs-on: macos-latest
    needs: prepare-release
    steps:
      - name: Placeholder for macOS builds
        run: echo "macOS builds will be implemented in A2b"

  build-windows:
    name: Build Windows x64
    runs-on: windows-latest
    needs: prepare-release
    steps:
      - name: Placeholder for Windows build
        run: echo "Windows x64 build will be implemented in A2c"

  # Placeholder for release creation - will be implemented in A3x tasks
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-linux, build-macos, build-windows]
    steps:
      - name: Placeholder for release creation
        run: echo "Release creation will be implemented in A3a"

  # Placeholder for asset uploads - will be implemented in A3b
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Placeholder for asset uploads
        run: echo "Asset uploads will be implemented in A3b"

  # Placeholder for release notes - will be implemented in A3c
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Placeholder for release notes
        run: echo "Release notes generation will be implemented in A3c"